/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: AtoB
  A to B format encoder for a variety of tetrahedral orientations and W channel weights.
---------------------------------------------------------------------
*/

desc: A to B format encoder for a variety of tetrahedral orientations and W channel weights.

// Import library with shared functions for matrix and graphics processing
import atkFunctionLibrary.jsfx-inc

in_pin:A
in_pin:B
in_pin:C
in_pin:D

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z

slider1:0<0,7,1{Front Left Up [FLU FRD BLD BRU], Front Left Down [FLD FRU BLU BRD], Front Left-Right [FL FR BU BD], Front Up-Down [FU FD BL BR], Front & Back Down [F BD BLU BRU], Front & Back Up [F BU BLD BRD], Front Left-Right Up [FLU FRU FD B], Front Left-Right Down [FLD FRD FU B] }>Orientation

slider2:0<-0,3,0{Decorrelated (Planewaves), Canonical, Unscaled, Cardioid}>Weight


/**********************************************************
Initialisation
**********************************************************/
@init

// Some constants:
recSqrt2   = 1. / sqrt(2.);
sqrt3Div2   = sqrt(3.) / 2.;
sqrt3Div6   = sqrt(3.) / 6.;
sqrt6Div3   = sqrt(6.) / 3.;
recSqrt6   = 1. / sqrt(6.);

// Setting memory locations for 4x4 matrix as 1D arrays
matrixDSP       = 1000;


/**********************************************************
Updated slider value:
**********************************************************/
@slider

/* Invert the 4x4 matrix with coefficients matrixDSP[0]..matrixDSP[15]

  The function for inverting a 4x4 matrix is lifted of StackOverflow:
  http://stackoverflow.com/questions/1148309/inverting-a-4x4-matrix

  The code there is itself lifted of the MESA implementation of the GLU library:
  http://www.mesa3d.org/
*/

// Transformation matrix depends on direction
// This is the same code as for BtoA, but at the end we invert the matrix

// Option 0: orthogonal (front left up) [ FLU, FRD, BLD, BRU ]
slider1 == 0 ?
( 
  matrixDSP[0] =   0.5;
  matrixDSP[1] =   0.5;
  matrixDSP[2] =   0.5;
  matrixDSP[3] =   0.5;

  matrixDSP[4] =   0.5;
  matrixDSP[5] =   0.5;
  matrixDSP[6] =  -0.5;
  matrixDSP[7] =  -0.5;

  matrixDSP[8] =   0.5;
  matrixDSP[9] =  -0.5;
  matrixDSP[10] =  0.5;
  matrixDSP[11] = -0.5;

  matrixDSP[12] =  0.5;
  matrixDSP[13] = -0.5;
  matrixDSP[14] = -0.5;
  matrixDSP[15] =  0.5;
) :
(
  // Option 1: front left down [ FLD, FRU, BLU, BRD ]
  slider1 == 1 ?
  (
    matrixDSP[0] =  0.5;
    matrixDSP[1] =  0.5;
    matrixDSP[2] =  0.5;
    matrixDSP[3] = -0.5;

    matrixDSP[4] =  0.5;
    matrixDSP[5] =  0.5;
    matrixDSP[6] = -0.5;
    matrixDSP[7] =  0.5;

    matrixDSP[8] =  0.5;
    matrixDSP[9] = -0.5;
    matrixDSP[10] =  0.5;
    matrixDSP[11] =  0.5;

    matrixDSP[12] =  0.5;
    matrixDSP[13] = -0.5;
    matrixDSP[14] = -0.5;
    matrixDSP[15] = -0.5;
  ) :
  (
    // Option 2: front left-right [ FL, FR, BU, BD ]
    
    slider1 == 2 ?
    (     
      matrixDSP[0] =  0.5;
      matrixDSP[1] =  0.5;
      matrixDSP[2] =  recSqrt2;
      matrixDSP[3] =  0.;

      matrixDSP[4] =  0.5;
      matrixDSP[5] =  0.5;
      matrixDSP[6] = -recSqrt2;
      matrixDSP[7] =  0.;

      matrixDSP[8] =  0.5;
      matrixDSP[9] = -0.5;
      matrixDSP[10] =  0.;
      matrixDSP[11] =  recSqrt2;

      matrixDSP[12] =  0.5;
      matrixDSP[13] = -0.5;
      matrixDSP[14] =  0.;
      matrixDSP[15] = -recSqrt2;
    ) :
    (
      // Option 3: front up-down [ FU, FD, BL, BR ]
      
      slider1 == 3 ?
      (
        matrixDSP[0] =  0.5;
        matrixDSP[1] =  0.5;
        matrixDSP[2] =  0.;
        matrixDSP[3] =  recSqrt2;

        matrixDSP[4] =  0.5;
        matrixDSP[5] =  0.5;
        matrixDSP[6] =  0.;
        matrixDSP[7] = -recSqrt2;

        matrixDSP[8] =  0.5;
        matrixDSP[9] = -0.5;
        matrixDSP[10] =  recSqrt2;
        matrixDSP[11] =  0.;

        matrixDSP[12] =  0.5;
        matrixDSP[13] = -0.5;
        matrixDSP[14] = -recSqrt2;
        matrixDSP[15] =  0.;
      ) :
      (
        // Option 4: front & back down [ F, BD, BLU, BRU ]
        
        slider1 == 4 ?
        (
          matrixDSP[0] =  0.5;
          matrixDSP[1] =  sqrt3Div2;
          matrixDSP[2] =  0.;
          matrixDSP[3] =  0.;

          matrixDSP[4] =  0.5;
          matrixDSP[5] = -sqrt3Div6;
          matrixDSP[6] =  0.;
          matrixDSP[7] = -sqrt6Div3;

          matrixDSP[8] =  0.5;
          matrixDSP[9] = -sqrt3Div6;
          matrixDSP[10] =  recSqrt2;
          matrixDSP[11] =  recSqrt6;

          matrixDSP[12] =  0.5;
          matrixDSP[13] = -sqrt3Div6;
          matrixDSP[14] = -recSqrt2;
          matrixDSP[15] =  recSqrt6;
        ) :
        (
          // Option 5: front & back up [ F, BU, BLD, BRD ]
          
          slider1 == 5 ?
          (
            matrixDSP[0] =  0.5;
            matrixDSP[1] =  sqrt3Div2;
            matrixDSP[2] =  0.;
            matrixDSP[3] =  0.;

            matrixDSP[4] =  0.5;
            matrixDSP[5] = -sqrt3Div6;
            matrixDSP[6] =  0.0;
            matrixDSP[7] =  sqrt6Div3;

            matrixDSP[8] =  0.5;
            matrixDSP[9] = -sqrt3Div6;
            matrixDSP[10] =  recSqrt2;
            matrixDSP[11] = -recSqrt6;

            matrixDSP[12] =  0.5;
            matrixDSP[13] = -sqrt3Div6;
            matrixDSP[14] = -recSqrt2;
            matrixDSP[15] = -recSqrt6;
          ) :
          (
            // Option 6: front left-right up [ FLU, FRU, FD, B ]
            
            slider1 == 6 ?
            (
              matrixDSP[0] =  0.5;
              matrixDSP[1] =  sqrt3Div6;
              matrixDSP[2] =  recSqrt2;
              matrixDSP[3] =  recSqrt6;

              matrixDSP[4] =  0.5;
              matrixDSP[5] =  sqrt3Div6;
              matrixDSP[6] = -recSqrt2;
              matrixDSP[7] =  recSqrt6;

              matrixDSP[8] =  0.5;
              matrixDSP[9] =  sqrt3Div6;
              matrixDSP[10] =  0.;
              matrixDSP[11] = -sqrt6Div3;

              matrixDSP[12] =  0.5;
              matrixDSP[13] = -sqrt3Div2;
              matrixDSP[14] =  0.;
              matrixDSP[15] =  0.;
            ) :
            (
              // Option 7: front left-right down [ FLD, FRD, FU, B ]

              matrixDSP[0] =  0.5;
              matrixDSP[1] =  sqrt3Div6;
              matrixDSP[2] =  recSqrt2;
              matrixDSP[3] = -recSqrt6;

              matrixDSP[4] =  0.5;
              matrixDSP[5] =  sqrt3Div6;
              matrixDSP[6] = -recSqrt2;
              matrixDSP[7] = -recSqrt6;

              matrixDSP[8] =  0.5;
              matrixDSP[9] =  sqrt3Div6;
              matrixDSP[10] =  0.;
              matrixDSP[11] =  sqrt6Div3;

              matrixDSP[12] =  0.5;
              matrixDSP[13] = -sqrt3Div2;
              matrixDSP[14] =  0.;
              matrixDSP[15] =  0.;
            );

          );

        );

      );

    );
  );
);


// Weight:
// Option 0: Decorrelated (on the sphere)
slider2 == 0 ?
(
  g0 = sqrt(2./3.);
) :
(
  // Option 1: Canonical
  slider2 == 1 ?
  (
    g0 = 1.;
  ) :
  (
    // Option 2: Unscaled, W_gain = 1
    slider2 == 2 ?
    (
      g0 = sqrt(2.);
    ) :
    // Option 3: Cardioid
    (
      g0 = sqrt(6.);
    );
  );
);


// Compensate matrix for weight:
matrixDSP[0] =  g0 * matrixDSP[0];
matrixDSP[4] =  g0 * matrixDSP[4];
matrixDSP[8] =  g0 * matrixDSP[8];
matrixDSP[12] = g0 * matrixDSP[12];

// As compared to BtoA we now invert the matrix
invertMatrix(matrixDSP);



/**********************************************************
Calculate audio sample
**********************************************************/
@sample
wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;

// Matrix multiplication with input signal:
spl0 = wIn * matrixDSP[0]  + xIn * matrixDSP[1]  + yIn * matrixDSP[2]  + zIn * matrixDSP[3];
spl1 = wIn * matrixDSP[4]  + xIn * matrixDSP[5]  + yIn * matrixDSP[6]  + zIn * matrixDSP[7];
spl2 = wIn * matrixDSP[8]  + xIn * matrixDSP[9]  + yIn * matrixDSP[10] + zIn * matrixDSP[11];
spl3 = wIn * matrixDSP[12] + xIn * matrixDSP[13] + yIn * matrixDSP[14] + zIn * matrixDSP[15];
