/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: stereo
  A Matrix decoder synthesising a stereo pair.
  
---------------------------------------------------------------------
*/

desc: Stereo decoder

// Import library with shared functions
import atkConstantsAndMathsLibrary.jsfx-inc
import atkMatrixLibrary.jsfx-inc
import atkGraphicsLibrary.jsfx-inc

in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:L
out_pin:R

slider1:30<0,180,1>Angle
slider2:0.5<0,1.,0.01>Mic pattern (Omni - Cardoid - Figure 8)


/**********************************************************
Initialisation
**********************************************************/
@init

// Setting memory locations for 4x4 matrix as 1D array
matrixDSP       = 1000;


/**********************************************************
Updated slider value:
**********************************************************/
@slider

angle   = slider1 * kDeg2Rad;
pattern = slider2;

// Generate 2 x 4 decoding matrix
generateDecodeStereoMatrix(matrixDSP, angle, pattern);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

// We don't envisage angle or pattern being changed dynamically, and hence there is no need for interpolations
wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;


// Prevent potential blow up if track is 2 channels only and spl2 and spl3 are un-ininitiated.
(num_ch == 2) ? (
  yIn = 0.;
  zIn = 0.;
);

// Matrix multiplication with input signal.

// Front (left and right)
spl0 = wIn * matrixDSP[0]  + xIn * matrixDSP[1]  + yIn * matrixDSP[2]  + zIn * matrixDSP[3];
spl1 = wIn * matrixDSP[4]  + xIn * matrixDSP[5]  + yIn * matrixDSP[6]  + zIn * matrixDSP[7];
// Channel 3 and 4 need to be muted to prevent signal in to leak through
spl2 = 0.;
spl3 = 0.;
