/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: 5_0
  Bruce Wiggins optimised ITU 5.0 decoders
---------------------------------------------------------------------

---------------------------------------------------------------------
Irregular array decoding coefficients (5.0, 7.0) are kindly provided by
Bruce Wiggins: http://www.brucewiggins.co.uk/

B. Wiggins, "An Investigation into the Real-time Manipulation and Control of
Three-dimensional Sound Fields," PhD Thesis, University of Derby, Derby, 2004.
---------------------------------------------------------------------
*/

desc: Bruce Wiggins optimised ITU 5.0 decoders (L - R - C - LFE - SL - SR)

// Import library with shared functions
import atkConstantsAndMathsLibrary.jsfx-inc
import atkMatrixLibrary.jsfx-inc
import atkGraphicsLibrary.jsfx-inc

in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:L
out_pin:R
out_pin:C
out_pin:LFE
out_pin:SL
out_pin:SR
out_pin:SBL
out_pin:SBR

slider1:0<0,2,1{Equal, Focus, Four}>Mode

/**********************************************************
Initialisation
**********************************************************/
@init

// Setting memory locations for 4x4 matrix as 1D array
matrixDSP       = 1000;


/**********************************************************
Updated slider value:
**********************************************************/
@slider

// Generate 8 x 4 decoding matrix
slider1 == 0 ? (
    generateDecode50EqualMatrix(matrixDSP);
) : (
  slider1 == 1 ? (
    generateDecode50FocusedMatrix(matrixDSP);
  ) : (
    generateDecode50FourlMatrix(matrixDSP);
  );
);



/**********************************************************
Calculate audio sample
**********************************************************/
@sample
wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;

// Some transforms blow up if track is 2 channels only as spl2 and spl3 might be un-ininitiated
(num_ch == 2) ? (
  yIn = 0.;
  zIn = 0.;
);

// Matrix multiplication with input signal.

// Front (left and right)
spl0 = wIn * matrixDSP[0]  + xIn * matrixDSP[1]  + yIn * matrixDSP[2]  + zIn * matrixDSP[3];
spl1 = wIn * matrixDSP[4]  + xIn * matrixDSP[5]  + yIn * matrixDSP[6]  + zIn * matrixDSP[7];

// Center & LFE
spl2 = wIn * matrixDSP[8]  + xIn * matrixDSP[9]  + yIn * matrixDSP[10] + zIn * matrixDSP[11];
spl3 = wIn * matrixDSP[12] + xIn * matrixDSP[13] + yIn * matrixDSP[14] + zIn * matrixDSP[15];

// Surround
spl4 = wIn * matrixDSP[16] + xIn * matrixDSP[17] + yIn * matrixDSP[18] + zIn * matrixDSP[19];
spl5 = wIn * matrixDSP[20] + xIn * matrixDSP[21] + yIn * matrixDSP[22] + zIn * matrixDSP[23];

// Surround back
spl6 = wIn * matrixDSP[24] + xIn * matrixDSP[25] + yIn * matrixDSP[26] + zIn * matrixDSP[27];
spl7 = wIn * matrixDSP[28] + xIn * matrixDSP[29] + yIn * matrixDSP[30] + zIn * matrixDSP[31];

