/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Direction
  Standard 1st order planewave encoder

  This operates on one mono source.

  Reaper is treating mono files as stereo files with identical
  content for left and right channel. Hence this plugin is set to
  expect a stereo signal in. The stereo signal will be mixed to mono
  before encoding.
---------------------------------------------------------------------
*/

desc: Encode mono signal as directional (planewave) soundfield

slider1:0<-180,180,1>Azimuth (degrees)
slider2:0<-90,90,1>Elevation (degrees)

in_pin:L
in_pin:R

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z


/**********************************************************
Initialisation
**********************************************************/
@init
// Constants
recSqrt2 = 1./sqrt(2.);

// Flag indicating that the plugin has not been fully initialised yet
initialised = 0;


/**********************************************************
Updated slider value:
**********************************************************/
@slider
azimuth      = (slider1*3.14159265359)/180.;
elevation    = (slider2*3.14159265359)/180.;
cosAzimuth   = cos(azimuth);
sinAzimuth   = sin(azimuth);
cosElevation = cos(elevation);
sinElevation = sin(elevation);

// Set coefficients if the plugin has not yet been initialised
initialised == 0 ?
(
  coeff1 = cosAzimuth * cosElevation;
  coeff2 = sinAzimuth * cosElevation;
  coeff3 =              sinElevation;

  // Now we are fully initialised
  initialised = 1;
)


/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block
inverseSamplesblock = 1. / samplesblock;
// Linear ramp to new coefficient values over the vector to prevent clicks
inc1 = ( (cosAzimuth * cosElevation) - coeff1) * inverseSamplesblock;
inc2 = ( (sinAzimuth * cosElevation) - coeff2) * inverseSamplesblock;
inc3 = (               sinElevation  - coeff3) * inverseSamplesblock;


/**********************************************************
Calculate audio sample
**********************************************************/
@sample
// Mix left and right as mono signal
input = 0.5 * (spl0 + spl1);

coeff1 = coeff1 + inc1;
coeff2 = coeff2 + inc2;
coeff3 = coeff3 + inc3;

spl0 =  input * recSqrt2;
spl1 =  input * coeff1;
spl2 = -input * coeff2;
spl3 =  input * coeff3;
