/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Direction
  Standard 1st order planewave encoder

  This operates on one mono source.

  Reaper is treating mono files as stereo files with identical
  content for left and right channel. Hence this plugin is set to
  expect a stereo signal in. The stereo signal will be mixed to mono
  before encoding.

  This plugin use SpatDIF coordinate system conventions rather than
  standard ambisonics litterature coordinate conventions.
  http://www.spatdif.org

  The background image is generated in Cycling'74 Max using the
  ambimonitor external, part of Ambisonics Externals for MaxMSP.

  Copyright Â© 2006 - 2011 by Philippe Kocher
  ICST Institute for Computer Music and Sound Technology
  Zurich University of the Arts
  Released under the terms of the GNU Lesser General Public License (LGPL)

  http://www.icst.net/research/downloads/ambisonics-externals-for-maxmsp/
---------------------------------------------------------------------
*/

desc: Encode mono signal as directional (planewave) soundfield

filename:0,HorizontalBackground.png

slider1:0<-180,180,1>Azimuth (degrees)
slider2:0<-90,90,1>Elevation (degrees)

in_pin:L
in_pin:R

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z


/**********************************************************
Initialisation
**********************************************************/
@init
// Constants
recSqrt2 = 1./sqrt(2.);
rad2deg = 180./$pi;
deg2rad = $pi/180.;

posX = 200;
posY = 200;

// Flag indicating that the plugin has not been fully initialised yet
initialised = 0;

function calculateCoefficients()
(
  cosAzimuth   = cos(azimuth);
  sinAzimuth   = sin(azimuth);
  cosElevation = cos(elevation);
  sinElevation = sin(elevation);

  // Set coefficients if the plugin has not yet been initialised
  initialised == 0 ?
  (
    coeff1 = cosAzimuth * cosElevation;
    coeff2 = sinAzimuth * cosElevation;
    coeff3 =              sinElevation;

    // Now we are fully initialised
    initialised = 1;
  )
);

/**********************************************************
Updated slider value:
**********************************************************/
@slider
azimuth      = slider1*deg2rad;
elevation    = slider2*deg2rad;
calculateCoefficients();


/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block
inverseSamplesblock = 1. / samplesblock;
// Linear ramp to new coefficient values over the vector to prevent clicks
inc1 = ( (cosAzimuth * cosElevation) - coeff1) * inverseSamplesblock;
inc2 = ( (sinAzimuth * cosElevation) - coeff2) * inverseSamplesblock;
inc3 = (               sinElevation  - coeff3) * inverseSamplesblock;


/**********************************************************
Custom graphic interface
**********************************************************/
@gfx 400 300

// Set colors
gfx_a=1;
gfx_r=gfx_g=gfx_b=1;

// Determine geometry
centerX = gfx_w  * 0.5;
centerY = gfx_h * 0.5;

centerX < centerY ? radius = centerX : radius = centerY;
radius = radius - 10;

// Background graphics
coordinatelist[0] = 0;                  //left-most pixel location for source
coordinatelist[1] = 0;                  //top-most pixel location for source
coordinatelist[2] = 800;                //width of source
coordinatelist[3] = 800;                //height of source
coordinatelist[4] = centerX - radius;   //left-most pixel location of destination
coordinatelist[5] = centerY - radius;   //top-most pixel location of destination
coordinatelist[6] = 2 * radius;         //width of destination to fill
coordinatelist[7] = 2 * radius;         //height of destination to fill
coordinatelist[8] =0;                   //represents offset from center of image
coordinatelist[9] =0;                   //represents offset from center of image
gfx_blitext(0,coordinatelist,0);

// Reset azimuth on mouse click
mouse_cap == 1 ?
(
  mouseX = mouse_x - centerX;
  mouseY = mouse_y - centerY;
  azimuth = atan2(mouseX, -mouseY);
  slider1 = azimuth * rad2deg;
  // Notify GUI that azimuth has changed, and update coefficients
  sliderchange(slider1);
  calculateCoefficients();
);

posX = centerX + radius*(sin(azimuth) * cos(elevation));
posY = centerY - radius*(cos(azimuth) * cos(elevation));

// Red square as interactive direction indicator
gfx_r = 1;
gfx_g = 0;
gfx_b = 0;;

gfx_x = posX-5;
gfx_y = posY-5;
gfx_rectto(posX+5, posY+5);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample
// Mix left and right as mono signal
input = 0.5 * (spl0 + spl1);

coeff1 = coeff1 + inc1;
coeff2 = coeff2 + inc2;
coeff3 = coeff3 + inc3;

spl0 =  input * recSqrt2;
spl1 =  input * coeff1;
spl2 = -input * coeff2;
spl3 =  input * coeff3;
