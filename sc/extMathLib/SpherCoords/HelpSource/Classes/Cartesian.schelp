CLASS:: Cartesian
summary:: Cartesian point in 3D space
categories:: Geometry
related:: Point, Spherical

DESCRIPTION::
Defines a point in 3D Cartesian space.


CLASSMETHODS::

METHOD:: new
Defines a new Cartesian Point.


INSTANCEMETHODS::

METHOD:: x
Get or set the x coordinate value.

METHOD:: y
Get or set the y coordinate value.

METHOD:: z
Get or set the z coordinate value.


METHOD:: set
Sets the Cartesian Point x, y and z values.

subsection:: Testing

METHOD:: ==
Answers a Boolean whether the receiver equals the argument.

METHOD:: hash
Returns a hash value for the receiver.


subsection:: Math

METHOD:: +
Addition.

argument:: delta
May be a simple number, a Point, an array or a Cartesian Point.

METHOD:: -
Subtraction.

argument:: delta
May be a simple number, a Point, an array or a Cartesian Point.

METHOD:: *
Multiplication.

argument:: scale
May be a simple number, a Point, an array or a Cartesian Point.

returns:: Cartesian.new(this.x * scale.x, this.y * scale.y, this.z * scale.z)

discussion:: Note that the result of * for a 3D Cartesian Point does not match that of sclang's Point class, where the result is interpreted as the multiplication of complex numbers.

METHOD:: /
Division.

argument:: scale
May be a simple number, a Point, an array or a Cartesian Point.

returns:: Cartesian.new(this.x / scale.x, this.y / scale.y, this.z / scale.z)

discussion:: Note that the result of / for a 3D Cartesian Point does not match that of sclang's Point class, where the result is interpreted as the division of complex numbers.


METHOD:: translate
Addition by a Cartesian Point.

METHOD:: scale
Multiplication by a Cartesian Point.

METHOD:: div
Division by a Cartesian Point.


METHOD:: rotate
Rotation about the origin in the XY plane by the angle given in radians.

discussion:: Positive values rotate from +X towards +Y

METHOD:: tilt
Rotation about the origin in the YZ plane by the angle given in radians.

discussion:: Positive values rotate from +Y towards +Z

METHOD:: tumble
Rotation about the origin in the XZ plane by the angle given in radians.

discussion:: Positive values rotate from +X towards +Z


METHOD:: rotateXY
Rotation about the origin in the XY plane by the angle given in radians.

discussion:: A synonym for rotate.

METHOD:: rotateYZ
Rotation about the origin in the YZ plane by the angle given in radians.

discussion:: A synonym for tilt.

METHOD:: rotateXZ
Rotation about the origin in the XZ plane by the angle given in radians.

discussion:: A synonym for tumble.


METHOD:: mirrorX
Mirror x, reflecting across the YZ plane.

METHOD:: mirrorY
Mirror y, reflecting across the XZ plane.

METHOD:: mirrorZ
Mirror z, reflecting across the XY plane.

METHOD:: mirrorO
Mirror across the origin.

METHOD:: abs
Absolute value of the Point.

METHOD:: rho
Return the spherical coordinate radius of the receiver.

METHOD:: theta
Return the spherical coordinate azimuth angle of the receiver.

METHOD:: phi
Return the spherical coordinate elevation angle of the receiver.

METHOD:: dist
Return the distance from the receiver to aCart.

METHOD:: transpose
Return a Cartesian Point whose x and y coordinates are swapped.

discussion:: This matches the return value for Point.transpose.

METHOD:: transposeXY
Return a Cartesian Point whose x and y coordinates are swapped.

discussion:: A synonym for transpose.

METHOD:: transposeYZ
Return a Cartesian Point whose y and z coordinates are swapped.

METHOD:: transposeXZ
Return a Cartesian Point whose x and z coordinates are swapped.

METHOD:: round
Round the coordinate values to a multiple of quantum.

METHOD:: trunc
Truncate the coordinate values to a multiple of quantum.


subsection:: Conversion

METHOD:: asCartesian
Returns the receiver.

METHOD:: asPoint
Returns a Point, discarding z.

METHOD:: asComplex
Returns a complex number with x as the real part and y as the imaginary part.

METHOD:: asPolar
Returns a Polar value, discarding z.

METHOD:: asSpherical
Returns a Spherical value.

METHOD:: asArray
Returns an Array.

returns:: [ x, y, z ]


