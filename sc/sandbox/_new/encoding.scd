// -------------------------------------------------------
// ATK (Sandbox)
//
// New encoders--using the decoders generated by ATKMatrix.sc
//
//
// Coded by Joseph Anderson 2011
//
// -------------------------------------------------------


// -------------------------------------------------------
// test (decoders built using Mix.ar)
//
// shelf filtering, if required, is built into decoder
// specify use through matrix choice
//
// -------------------------------------------------------
// quad (spec'd as narrow quad)
// mono pink noise, sound synth function
(
{
	var fl, bl, br, fr;					// for quad output
	var azim, sig;
	var decoderMatrix, angle, k;
	var encoderMatrix;

	// ------------------------------------------------------------
	// constants
	angle = pi/6;
//	k = 1;					// velocity, or 'strict' soundfield
//	k = 1/2.sqrt;				// energy, for 2D
//	k = 1/2;					// controlled opposites, for 2D
//	k = 'velocity';			// velocity
//	k = 'energy';				// energy
//	k = 'controlled';			// controlled opposites
//	k = 'single';				// synonym for energy
	k = 'dual';				// dual band

	// kr.... for SC3's internal encoder
	azim = MouseX.kr(pi, -pi);


	// ------------------------------------------------------------
	// set up decoder matrix
	decoderMatrix = AtkDecoderMatrix.newQuad(angle, k);


	// ------------------------------------------------------------
	// set up encoder matrix;

//	encoderMatrix = AtkEncoderMatrix.newOmni;			// 1 channel only...

	encoderMatrix = AtkEncoderMatrix.newDirection;		// 3 channels only...
//	encoderMatrix = AtkEncoderMatrix.newDirection(pi.neg/2);// 3 channels only...

//	encoderMatrix = AtkEncoderMatrix.newDirections([[0, 0]]);
//	encoderMatrix = AtkEncoderMatrix.newDirections([[pi/4, 0]]);
//	encoderMatrix = AtkEncoderMatrix.newDirections([[pi.neg/2, 0]]);

//	encoderMatrix = AtkEncoderMatrix.newB;


	// ------------------------------------------------------------
	// test sig
	sig = PinkNoise.ar; 					// mono pink noise


	// ------------------------------------------------------------
	// encode
//	sig = AtkEncode.ar(PanB.ar(sig, azim.neg/pi), encoderMatrix); // SC3s encoder is +/-1, CW
//	sig = AtkEncode.ar([sig], encoderMatrix);
	sig = AtkEncode.ar(sig, encoderMatrix);
//	sig;				// test raw b-format out
	sig.dump;
	

	// ------------------------------------------------------------
	// distance filter
	sig = AtkDistance.ar(sig.at(0), sig.at(1), sig.at(2), sig.at(3), 1);

	sig.dump;

	// decode to output
	#fl, bl, br, fr = AtkDecode.ar(sig, decoderMatrix);

	[fl, fr, bl, br]		// reorder output to match speaker arrangement

}.scope;
)
