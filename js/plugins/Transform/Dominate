/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Dominate
  Apply dominance to a first order ambisonic signal (B-format) along an arbitrary axis
---------------------------------------------------------------------
*/


desc: Apply dominance to a first order ambisonic signal along an arbitrary axis

// Import library with shared functions for matrix and graphics processing
import atkFunctionLibrary.jsfx-inc

in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z

slider1:0<-180,180,1>Azimuth (mouse)
slider2:0<-90,90,1>Elevation
slider3:0<-0.,24.,0.1>Gain increase in dB (mouse)


/**********************************************************
Initialisation
**********************************************************/
@init

// Flag indicating that the plugin has not been fully initialised yet
initialised = 0;

azimuth   = 0;
elevation = 0.;

// Constants
kInv24   = 1. / 24.;

// Setting memory locations for a number of 4x4 matrixes as 1D arrays
matrixRotate1   = 1000;
matrixTumble1   = 1020;
matrixTransform = 1040;
matrixTumble2   = 1060;
matrixRotate2   = 1080;

// These are used for matrix multiplications
matrixTemp1     = 1100;
matrixTemp2     = 1120;

// Resulting matrixes used for DSP processing
matrixDSP       = 1200;
matrixNewDSP    = 1220;
matrixInc       = 1240;

// Matrixes for graphic display of transformations
matrixDisplayPoints      = 1300;
matrixDisplayTransformed = 1400;
matrixDisplayInterpreted = 1500;

// This only needs to be generated once:
numDisplayedPoints = 24;
generateDisplaySignalMatrix(matrixDisplayPoints, numDisplayedPoints);


function calculateMatrix()
(
  // Required for graphics
  cosAzimuth   = cos(azimuth);
  sinAzimuth   = sin(azimuth);

  cosElevation = cos(elevation);
  sinElevation = sin(elevation);
  
  // Generate matrixes
  generateRotationMatrix(matrixRotate1, (-azimuth));
  generateTumblelMatrix(matrixTumble1, -elevation);
  generateDominateMatrix(matrixTransform, gain);
  generateRotationMatrix(matrixRotate2, azimuth);
  generateTumblelMatrix(matrixTumble2, elevation);
  
  /* Build processing matrix by performing a series of matrix multiplications
                        result =         left     X               right             */
  matrixMultiplication  (matrixTemp1,    4, 4, matrixTumble1,     4, 4, matrixRotate1);
  matrixMultiplication  (matrixTemp2,    4, 4, matrixTransform,   4, 4, matrixTemp1);
  matrixMultiplication  (matrixTemp1,    4, 4, matrixTumble2,     4, 4, matrixTemp2);
  matrixMultiplication  (matrixNewDSP,   4, 4, matrixRotate2,     4, 4, matrixTemp1);
  
  /* Transformation and interpretation of display points */
  matrixMultiplication(matrixDisplayTransformed, 4, 4, matrixNewDSP, 4, numDisplayedPoints, matrixDisplayPoints);
  interpreteProcessedPoints(matrixDisplayInterpreted, matrixDisplayTransformed, numDisplayedPoints);
  
  // Set initial DSP processing coefficients if the plugin has not yet been initialised
  initialised == 0 ?
  (
    i = 0;
    loop(16,
      matrixDSP[i] = matrixNewDSP[i];
    );
    // Now we are fully initialised
    initialised = 1;
  );
);


/**********************************************************
Updated slider value:
**********************************************************/
@slider

azimuth         = slider1 * kDeg2Rad;
elevation       = slider2 * kDeg2Rad;
gain            = slider3;

calculateMatrix();


/**********************************************************
Graphics
**********************************************************/
@gfx 500 500

gxColorSet(1, 1, 1, 1);
determineGeometry();
drawBackgroundImage(800, 800, gCenterX - gRadius, gCenterY - gRadius, 2 * gRadius, 2 * gRadius);

// Reset azimuth and transformAngle on mouse click
mouse_cap == 1 ?
(
  mouseX = mouse_x - gCenterX;
  mouseY = mouse_y - gCenterY;
  
  // Update azimuth and slider1 and notify GUI of the change
  azimuth = atan2(mouseX, -mouseY);
  slider1 = azimuth * kRad2Deg;
  slider_automate(slider1);
  
  // Update transformAngle and slider3 and notify GUI of the change
  slider3 = 24. * sqrt(mouseX*mouseX + mouseY*mouseY) * gInverseRadius;
  // Restrict the range to [0, 24]
  slider3 > 24. ? slider3 = 24.;
  gain    = slider3;
  slider_automate(slider3);
  
  calculateMatrix();
);

// Draw points illustrating the effect of the transform
displayTransformedPoints(matrixDisplayInterpreted, numDisplayedPoints, 0);

// Draw circle for interaction, map vertical position to saturation, lightness and radius
sinElevation < 0 ? (
  mSaturation = 1. - 0.25*sinElevation;
  mLightness = 0.4;
) : (
  mSaturation = 1.;
  mLightness = 0.4 + 0.25*sinElevation;
);
gxColorSetHsl(1.0, 195., mSaturation, mLightness);
posX = gCenterX + gRadius * slider3 * kInv24 * (sinAzimuth * cosElevation);
posY = gCenterY - gRadius * slider3 * kInv24 * (cosAzimuth * cosElevation);
mInteractionCircleRadius = 4. * sinElevation + 11.;
drawInteractionCircle(posX, posY, mInteractionCircleRadius);
    

/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block

inverseSamplesblock = 1. / samplesblock;

// Counter is called "ii" rather than "i" in order to ensure that we do not use the same counter here as in other sections
ii = 0;
loop(16,
  matrixInc[ii] = (matrixNewDSP[ii] - matrixDSP[ii]) * inverseSamplesblock;
  ii += 1;
);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

ii = 0;
loop(16,
  matrixDSP[ii] += matrixInc[ii];
  ii += 1;
);

wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;

// Matrix multiplication with input signal:
spl0 = wIn * matrixDSP[0] + xIn  * matrixDSP[1]  + yIn * matrixDSP[2]  + zIn * matrixDSP[3];
spl1 = wIn * matrixDSP[4] + xIn  * matrixDSP[5]  + yIn * matrixDSP[6]  + zIn * matrixDSP[7];
spl2 = wIn * matrixDSP[8] + xIn  * matrixDSP[9]  + yIn * matrixDSP[10] + zIn * matrixDSP[11];
spl3 = wIn * matrixDSP[12] + xIn * matrixDSP[13] + yIn * matrixDSP[14] + zIn * matrixDSP[15];
