/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Proximity
  Proximity facilitates the introduction of the proximity effect
  to encoded signals. At extremes, the proximity effect introduces
  a strong bass boost, as well as phase differences. The proximity
  effect can be an important contributor to perceptions of nearness.
  The Ambisonic Toolkit's nearfield compensation filter, NFC, undoes
  Proximity given the same distance argument.
---------------------------------------------------------------------
*/


desc: Apply proximity filtering to a first order ambisonic signal (B-format)

// This plugin isa not using any shared library functions
//import atkFunctionLibrary.jsfx-inc

in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z

slider1:1<0.03,5,0.01>Distance (in meters)


/**********************************************************
Initialisation
**********************************************************/
@init

function clearFilter()
(
  y1x = 0.0;
  y1y = 0.0;
  y1z = 0.0;  
);

// Flag indicasting that we are not fully initialised yet
initialised = 0;
paused = 1.;

clearFilter();


/**********************************************************
Updated slider value:
**********************************************************/
@slider

distanceNew = slider1;

initialised == 0 ? (
  distanceDSP = distanceNew;
  initialised = 1;
);


/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block

distanceInc = (distanceNew - distanceDSP) / samplesblock;
sampleDuration = 1. / srate;

/**********************************************************
Calculate audio sample
**********************************************************/
@sample

// Reaper adds anti-denormal noise to input, and hence we do not need to worry about 
// denorm performance issues with respect to the recursive values y1x, y1y and y1z
distanceDSP += distanceInc;

freq = 53.0 / distanceDSP;
wc = (2*$pi * freq) * sampleDuration;
a0 = 1 + sqrt((cos(wc) * -2.) + 2.);

// W is passed straight out
spl0 = spl0;

// Filter all 1st order components
y0x = spl1 + y1x;
spl1 = a0 * y0x - y1x;
y1x = y0x; 

y0y = spl2 + y1y;
spl2 = a0 * y0y - y1y;
y1y = y0y;

y0z = spl3 + y1z;
spl3 = a0 * y0z - y1z;
y1z = y0z;
