/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: Mirror
  Mirror sound field across an arbitrary plane.
---------------------------------------------------------------------
*/


desc: Mirror sound field across an arbitrary plane.

// Graphics file
filename:0,../lib/HorizontalBackground.png

// Import library with shared functions for matrix and graphics processing
import atkFunctionLibrary.jsfx-inc

in_pin:W
in_pin:X
in_pin:Y
in_pin:Z

out_pin:W
out_pin:X
out_pin:Y
out_pin:Z

slider1:0<-180,180,1>Azimuth (mouse)
slider2:0<-90,90,1>Elevation


/**********************************************************
Initialisation
**********************************************************/
@init

// Flag indicating that the plugin has not been fully initialised yet
initialised = 0;

azimuth   = 0;
elevation = 0.;

// Setting memory locations for a number of 4x4 matrixes as 1D arrays
matrixRotate1   = 1000;
matrixTumble1   = 1020;
matrixTransform = 1040;
matrixTumble2   = 1060;
matrixRotate2   = 1080;

// These are used for matrix multiplications
matrixTemp1     = 1100;
matrixTemp2     = 1120;

// Resulting matrixes used for DSP processing
matrixDSP       = 1200;
matrixNewDSP    = 1220;
matrixInc       = 1240;

// Matrixes for graphic display of transformations
matrixDisplayPoints                    = 1300;
matrixDisplayNonTransformedInterpreted = 1400;
matrixDisplayTransformed               = 1500;
matrixDisplayTransformedInterpreted    = 1600;

// Matrixes for display of mirror plane
matrixMirrorNonRotated          = 1700;
matrixMirrorRotateted           = 1730;
matrixMirrorRotatedInterpreted  = 1760;

// Display points only needs to be generated once:
numDisplayedPoints = 8;
generateDisplaySignalMatrix(matrixDisplayPoints, numDisplayedPoints);

// We'll display non-transformed points as well, and hence they need to be interpreted.
interpreteProcessedPoints(matrixDisplayNonTransformedInterpreted, matrixDisplayPoints, numDisplayedPoints);

// Override gain for interpreted non-transformed points. This way they'll show up as blue.
i = 0;
loop(numDisplayedPoints,
  matrixDisplayNonTransformedInterpreted[numDisplayedPoints*3 + i] = -20.;
  i += 1;
);

// Six points on non-rotated mirror plane
matrixMirrorNonRotated[0]  = kInvSqrt2;
matrixMirrorNonRotated[6]  = cos($pi*0.25) * cos($pi*0.5);
matrixMirrorNonRotated[12] = cos($pi*0.25) * sin($pi*0.5);
matrixMirrorNonRotated[18] = sin($pi*0.25);

matrixMirrorNonRotated[1]  = kInvSqrt2;
matrixMirrorNonRotated[7]  = cos(-$pi*0.25) * cos($pi*0.5);
matrixMirrorNonRotated[13] = cos(-$pi*0.25) * sin($pi*0.5);
matrixMirrorNonRotated[19] = sin(-$pi*0.25);

matrixMirrorNonRotated[2]  = kInvSqrt2;
matrixMirrorNonRotated[8]  = cos(-$pi*0.25) * cos(-$pi*0.5);
matrixMirrorNonRotated[14] = cos(-$pi*0.25) * sin(-$pi*0.5);
matrixMirrorNonRotated[20] = sin(-$pi*0.25);

matrixMirrorNonRotated[3]  = kInvSqrt2;
matrixMirrorNonRotated[9]  = cos($pi*0.25) * cos(-$pi*0.5);
matrixMirrorNonRotated[15] = cos($pi*0.25) * sin(-$pi*0.5);
matrixMirrorNonRotated[21] = sin($pi*0.25);

matrixMirrorNonRotated[4]  = kInvSqrt2;
matrixMirrorNonRotated[10] = cos($pi*0.5);
matrixMirrorNonRotated[16] = sin($pi*0.5);
matrixMirrorNonRotated[22] = 0.;

matrixMirrorNonRotated[5]  = kInvSqrt2;
matrixMirrorNonRotated[11] = cos(-$pi*0.5);
matrixMirrorNonRotated[17] = sin(-$pi*0.5);
matrixMirrorNonRotated[23] = 0;



function calculateMatrix()
(
  // Required for graphics
  cosAzimuth   = cos(azimuth);
  sinAzimuth   = sin(azimuth);

  cosElevation = cos(elevation);
  sinElevation = sin(elevation);
  
  // Generate matrixes
  generateRotationMatrix(matrixRotate1, (-azimuth));
  generateTumblelMatrix(matrixTumble1, -elevation);
  generateMirrorMatrix(matrixTransform);
  generateRotationMatrix(matrixRotate2, azimuth);
  generateTumblelMatrix(matrixTumble2, elevation);
  
  /* Build processing matrix by performing a series of matrix multiplications
                        result =         left X                   right             */
  matrixMultiplication  (matrixTemp1,    4, 4, matrixTumble1,     4, 4, matrixRotate1);
  matrixMultiplication  (matrixTemp2,    4, 4, matrixTransform,   4, 4, matrixTemp1);
  matrixMultiplication  (matrixTemp1,    4, 4, matrixTumble2,     4, 4, matrixTemp2);
  matrixMultiplication  (matrixNewDSP,   4, 4, matrixRotate2,     4, 4, matrixTemp1);
  
  // Transformation and interpretation of display points
  matrixMultiplication  (matrixDisplayTransformed, 4, 4, matrixNewDSP, 4, numDisplayedPoints, matrixDisplayPoints);
  interpreteProcessedPoints(matrixDisplayTransformedInterpreted, matrixDisplayTransformed, numDisplayedPoints);
  
  // Rotation and interpretation of mirror plane
  matrixMultiplication  (matrixTemp1,              4, 4, matrixRotate2, 4, 4, matrixTumble2);
  matrixMultiplication  (matrixMirrorRotateted,    4, 4, matrixTemp1,   4, 6, matrixMirrorNonRotated);
  interpreteProcessedPoints(matrixMirrorRotatedInterpreted, matrixMirrorRotateted, 6);
  
  // Set initial DSP processing coefficients if the plugin has not yet been initialised
  initialised == 0 ?
  (
    i = 0;
    loop(16,
      matrixDSP[i] = matrixNewDSP[i];
    );
    // Now we are fully initialised
    initialised = 1;
  );
);


/**********************************************************
Updated slider value:
**********************************************************/
@slider

azimuth         = slider1 * kDeg2Rad;
elevation       = slider2 * kDeg2Rad;
calculateMatrix();


/**********************************************************
Graphics
**********************************************************/
@gfx 500 500

function postBefore()
(
  gxPositionSet(20., 20.);
  gfx_drawchar($'B');
  gfx_drawchar($'e');
  gfx_drawchar($'f');
  gfx_drawchar($'o');
  gfx_drawchar($'r');
  gfx_drawchar($'e');
);

function postAfter()
(
  gxPositionSet(20., 60.);
  gfx_drawchar($'A');
  gfx_drawchar($'f');
  gfx_drawchar($'t');
  gfx_drawchar($'e');
  gfx_drawchar($'r');
);

function postMirror()
(
  gxPositionSet(20., 40.);
  gfx_drawchar($'M');
  gfx_drawchar($'i');
  gfx_drawchar($'r');
  gfx_drawchar($'r');
  gfx_drawchar($'o');
  gfx_drawchar($'r');
);

// Set colors
gxColorSet(1, 1, 1, 1);
determineGeometry();
drawBackgroundImage(800, 800, gCenterX - gRadius, gCenterY - gRadius, 2 * gRadius, 2 * gRadius);

// Mouse interaction: Reset azimuth and transformAngle
mouse_cap == 1 ?
(
  mouseX = mouse_x - gCenterX;
  mouseY = mouse_y - gCenterY;
  
  // Update azimuth and slider2 and notify GUI of the change
  azimuth = atan2(mouseX, -mouseY);
  slider1 = azimuth * kRad2Deg;
  slider_automate(slider1);
    
  calculateMatrix();
);

// Draw mirror plane
gxColorSet(1, 0.5, 1., 0.75);

// Outline of mirror plane:
pos1x = gCenterX - matrixMirrorRotatedInterpreted[6] * (1. + 0.1 * matrixMirrorRotatedInterpreted[12]) * gRadius * kSqrt2;
pos1y = gCenterY - matrixMirrorRotatedInterpreted[0] * (1. + 0.1 * matrixMirrorRotatedInterpreted[12]) * gRadius * kSqrt2;

pos2x = gCenterX - matrixMirrorRotatedInterpreted[7] * (1. + 0.1 * matrixMirrorRotatedInterpreted[13]) * gRadius * kSqrt2;
pos2y = gCenterY - matrixMirrorRotatedInterpreted[1] * (1. + 0.1 * matrixMirrorRotatedInterpreted[13]) * gRadius * kSqrt2;

pos3x = gCenterX - matrixMirrorRotatedInterpreted[8] * (1. + 0.1 * matrixMirrorRotatedInterpreted[14]) * gRadius * kSqrt2;
pos3y = gCenterY - matrixMirrorRotatedInterpreted[2] * (1. + 0.1 * matrixMirrorRotatedInterpreted[14]) * gRadius * kSqrt2;

pos4x = gCenterX - matrixMirrorRotatedInterpreted[9] * (1. + 0.1 * matrixMirrorRotatedInterpreted[15]) * gRadius * kSqrt2;
pos4y = gCenterY - matrixMirrorRotatedInterpreted[3] * (1. + 0.1 * matrixMirrorRotatedInterpreted[15]) * gRadius * kSqrt2;

drawQuadrangleOutline(pos1x, pos1y, pos2x, pos2y, pos3x, pos3y, pos4x, pos4y, 1.);

// Draw line at intersection between horisontal plane and mirror plane
pos1x = gCenterX - matrixMirrorRotatedInterpreted[10] * gRadius;
pos1y = gCenterY - matrixMirrorRotatedInterpreted[4]  * gRadius;

pos2x = gCenterX - matrixMirrorRotatedInterpreted[11] * gRadius;
pos2y = gCenterY - matrixMirrorRotatedInterpreted[5]  * gRadius;
drawLineSegment(pos1x, pos1y, pos2x, pos2y, 1.);
postMirror();

// Draw lines illustrating how each point has been mirrored
i = 0;
loop(numDisplayedPoints,
  gxColorSet(0.8, 0.5, 0.75, 1.);
  pos1x = gCenterX - gRadius * matrixDisplayNonTransformedInterpreted[numDisplayedPoints + i];
  pos1y = gCenterY - gRadius * matrixDisplayNonTransformedInterpreted[i];
  pos3x = gCenterX - gRadius * matrixDisplayTransformedInterpreted[numDisplayedPoints + i];
  pos3y = gCenterY - gRadius * matrixDisplayTransformedInterpreted[i];
  pos2x = (pos1x + pos3x) * 0.5;
  pos2y = (pos1y + pos3y) * 0.5;
  
  // Draw first part of line in "before" color
  drawLineSegment(pos1x, pos1y, pos2x, pos2y, 1.);
  
  // Draw small point where beam intersects mirror
  gxColorSet(1, 0.5, 1., 0.75);
  drawCenteredSquare(pos2x, pos2y, 3);
  
  // Draw second part of line using "after" coler
  gxColorSet(0.8, 1.0, 0.75, 0.5);
  drawLineSegment(pos2x, pos2y, pos3x, pos3y, 1.);
  
  i += 1;
);

// Draw non-transformed points:
displayTransformedPoints(matrixDisplayNonTransformedInterpreted, numDisplayedPoints);
postBefore();

// Draw points illustrating the effect of the transform
displayTransformedPoints(matrixDisplayTransformedInterpreted, numDisplayedPoints);
postAfter();

// Draw red square as interactive direction indicator, size and color tint depends on elevation
gxColorSet(0.5, 1.0 + 0.3 * sinElevation, 0.5 * sinElevation, 0.5 * sinElevation);
posX = gCenterX + gRadius * slider4 * (sinAzimuth * cosElevation);
posY = gCenterY - gRadius * slider4 * (cosAzimuth * cosElevation);
squareSize = 4. * sinElevation + 14.;
drawInteractionSquare(posX, posY, squareSize);

/**********************************************************
Preprocessing prior to audio vector processing.
**********************************************************/
@block

inverseSamplesblock = 1. / samplesblock;

// Counter is called "ii" rather than "i" in order to ensure that we do not use the same counter here as in other sections
ii = 0;
loop(16,
  matrixInc[ii] = (matrixNewDSP[ii] - matrixDSP[ii]) * inverseSamplesblock;
  ii += 1;
);


/**********************************************************
Calculate audio sample
**********************************************************/
@sample

ii = 0;
loop(16,
  matrixDSP[ii] += matrixInc[ii];
  ii += 1;
);

wIn = spl0;
xIn = spl1;
yIn = spl2;
zIn = spl3;

// Matrix multiplication with input signal:
spl0 = wIn * matrixDSP[0] + xIn  * matrixDSP[1]  + yIn * matrixDSP[2]  + zIn * matrixDSP[3];
spl1 = wIn * matrixDSP[4] + xIn  * matrixDSP[5]  + yIn * matrixDSP[6]  + zIn * matrixDSP[7];
spl2 = wIn * matrixDSP[8] + xIn  * matrixDSP[9]  + yIn * matrixDSP[10] + zIn * matrixDSP[11];
spl3 = wIn * matrixDSP[12] + xIn * matrixDSP[13] + yIn * matrixDSP[14] + zIn * matrixDSP[15];
