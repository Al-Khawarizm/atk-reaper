/*
Copyright the ATK Community and Joseph Anderson, Josh Parmenter, Trond Lossius, 2013

               J Anderson     j.anderson[at]ambisonictoolkit.net
               J Parmenter    j.parmenter[at]ambisonictoolkit.net
               T Lossius      trond.lossius[at]bek.no


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
and GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.


---------------------------------------------------------------------
  Class: atk-function-library.jsfx-inc
  Library of shared functions
---------------------------------------------------------------------
*/

/********************************************************************
Functions in the init section can be used by any plugin loading this
file, encouraging DRY (don't repeat yourself)
********************************************************************/
@init




/*---------------------------------------------------------------------
  Matrix section
---------------------------------------------------------------------*/

/********************************************************************
Matrix: Generate 1st order 4x4 matrix for rotation transformation
********************************************************************/
function generateRotationMatrix(matrix, angle)
(
  // We use SpatDIF (navigational) coordinate system rather than mathematical.
  
  matrix[0]  = 1.;
  matrix[1]  = 0.;
  matrix[2]  = 0.;
  matrix[3]  = 0.;
  
  matrix[4]  = 0.;
  matrix[5]  = cos(angle);
  matrix[6]  = sin(angle);
  matrix[7]  = 0.;
  
  matrix[8]  = 0.;
  matrix[9]  = -matrix[6];
  matrix[10] =  matrix[5];
  matrix[11] = 0.;
  
  matrix[12] = 0.;
  matrix[13] = 0.;
  matrix[14] = 0.;
  matrix[15] = 1.;
);


/********************************************************************
Matrix: Generate 1st order 4x4 matrix for tumble transformation
********************************************************************/
function generateTumblelMatrix(matrix, angle)
(  
  matrix[0]  =  1.;
  matrix[1]  =  0.;
  matrix[2]  =  0.;
  matrix[3]  =  0.;
  
  matrix[4]  =  0.;
  matrix[5]  =  cos(angle);
  matrix[6]  =  0.;
  matrix[7]  = -sin(angle);
  
  matrix[8]  =  0.;
  matrix[9]  =  0.;
  matrix[10] =  1.;
  matrix[11] =  0.;
  
  matrix[12] =  0.;
  matrix[13] = -matrix[7];
  matrix[14] =  0.;
  matrix[15] =  matrix[5];  
);


/********************************************************************
Matrix: Generate 1st order 4x4 matrix for tilt transformation
********************************************************************/
function generateFocusMatrix(matrix, angle)
(
  cosa = cos(angle);
  sina = sin(angle);
  roneplussinaa = 1. / (1. + sin(abs(angle)));
  sina1sina = sina * roneplussinaa;
  
  matrix[0]  = roneplussinaa;
  matrix[1]  = rsqrt2 * sina1sina;
  matrix[2]  = 0.;
  matrix[3]  = 0.;

  matrix[4]  = sqrt2 * sina1sina; 
  matrix[5]  = roneplussinaa;
  matrix[6]  = 0.;
  matrix[7]  = 0.;
  
  matrix[8]  = 0.;
  matrix[9]  = 0.;
  matrix[10] = cosa * roneplussinaa;
  matrix[11] = 0.;
  
  matrix[12] = 0.;
  matrix[13] = 0.;
  matrix[14] = 0.;
  matrix[15] = cosa * roneplussinaa;
);


/********************************************************************
Matrix: Generate 1st order 4x4 matrix for press transformation
********************************************************************/
function generatePressMatrix(matrix, angle)
(
  cosa = cos(angle);
  sina = sin(angle);
  cosa2 = cosa * cosa;
  asina = sin(abs(angle));
  sqrt2asinasina = sqrt2 * (asina * sina);
    
  matrix[0]  = 1.;
  matrix[1]  = 0.;
  matrix[2]  = 0.;
  matrix[3]  = 0.;
  
  matrix[4]  = sqrt2asinasina;
  matrix[5]  = cosa2;
  matrix[6]  = 0.;
  matrix[7]  = 0.;
  
  matrix[8]  = 0.;
  matrix[9]  = 0.;
  matrix[10] = cosa;
  matrix[11] = 0.;
  
  matrix[12] = 0.;
  matrix[13] = 0.;
  matrix[14] = cosa;
  matrix[15] = 1.;
);


/********************************************************************
Matrix: Generate 1st order 4x4 matrix for push transformation
********************************************************************/
function generatePushMatrix(matrix, angle)
(
  cosa = cos(angle);
  sina = sin(angle);
  
  cosa2 = cosa * cosa;
  asina = sin(abs(angle));
  sqrt2asinasina = sqrt2 * (asina * sina);
  
  matrix[0]  = 1.;
  matrix[1]  = 0.;
  matrix[2]  = 0.;
  matrix[3]  = 0.;
  
  matrix[4]  = sqrt2asinasina;
  matrix[5]  = cosa2;
  matrix[6]  = 0.;
  matrix[7]  = 0.;
  
  matrix[8]  = 0.;
  matrix[9]  = 0.;
  matrix[10] = cosa2;
  matrix[11] = 0.;
  
  matrix[12] = 0.;
  matrix[13] = 0.;
  matrix[14] = 0.;
  matrix[15] = cosa2;
);


/********************************************************************
Matrix: Generate 1st order 4x4 matrix for zoom transformation
********************************************************************/
function generateZoomMatrix(matrix, angle)
(  
  cosa = cos(angle);
  sina = sin(angle);
    
  matrix[0]  = 1.;
  matrix[1]  = rsqrt2 * sina;
  matrix[2]  = 0.;
  matrix[3]  = 0.;
  
  matrix[4]  = sqrt2 * sina;
  matrix[5]  = 1.;
  matrix[6]  = 0.;
  matrix[7]  = 0.;
  
  matrix[8]  = 0.;
  matrix[9]  = 0.;
  matrix[10] = cosa;
  matrix[11] = 0.;
  
  matrix[12] = 0.;
  matrix[13] = 0.;
  matrix[14] = cosa;
  matrix[15] = 1.;
);


/********************************************************************
Matrix: Multiplication of two 4x4 matrixes: result = left x right
********************************************************************/
function matrixMultiplication(result, left, right)
(
  // Iterate over columns of left matrix
  i = 0;
  loop(4, 
    // Iterate over rows of right matrix
    j = 0;
    loop(4,
      // Calculate one cell
      result[4*i+j] = 0.;
      k = 0;
      loop(4,
        result[4*i+j] += left[4*i+k]*right[4*k+j];
        k += 1;
      );
      j+= 1;
    );
    i+= 1;
  );
);


/********************************************************************
Matrix: Invert a 4x4 matrix
********************************************************************/
function invertMatrix(matrix)
(
  inv[0] =   matrix[5]  * matrix[10] * matrix[15] -
             matrix[5]  * matrix[11] * matrix[14] -
             matrix[9]  * matrix[6]  * matrix[15] +
             matrix[9]  * matrix[7]  * matrix[14] +
             matrix[13] * matrix[6]  * matrix[11] -
             matrix[13] * matrix[7]  * matrix[10];

  inv[4] =  -matrix[4]  * matrix[10]  * matrix[15] +
             matrix[4]  * matrix[11]  * matrix[14] +
             matrix[8]  * matrix[6]  * matrix[15] -
             matrix[8]  * matrix[7]  * matrix[14] -
             matrix[12] * matrix[6]  * matrix[11] +
             matrix[12] * matrix[7]  * matrix[10];

  inv[8] =   matrix[4]  * matrix[9]  * matrix[15] -
             matrix[4]  * matrix[11] * matrix[13] -
             matrix[8]  * matrix[5]  * matrix[15] +
             matrix[8]  * matrix[7]  * matrix[13] +
             matrix[12] * matrix[5]  * matrix[11] -
             matrix[12] * matrix[7]  * matrix[9];

  inv[12] = -matrix[4]  * matrix[9]  * matrix[14] +
             matrix[4]  * matrix[10] * matrix[13] +
             matrix[8]  * matrix[5]  * matrix[14] -
             matrix[8]  * matrix[6]  * matrix[13] -
             matrix[12] * matrix[5]  * matrix[10] +
             matrix[12] * matrix[6]  * matrix[9];

  inv[1] =  -matrix[1]  * matrix[10] * matrix[15] +
             matrix[1]  * matrix[11] * matrix[14] +
             matrix[9]  * matrix[2]  * matrix[15] -
             matrix[9]  * matrix[3]  * matrix[14] -
             matrix[13] * matrix[2]  * matrix[11] +
             matrix[13] * matrix[3]  * matrix[10];

  inv[5] =   matrix[0]  * matrix[10] * matrix[15] -
             matrix[0]  * matrix[11] * matrix[14] -
             matrix[8]  * matrix[2]  * matrix[15] +
             matrix[8]  * matrix[3]  * matrix[14] +
             matrix[12] * matrix[2]  * matrix[11] - 
             matrix[12] * matrix[3]  * matrix[10];

  inv[9] =  -matrix[0]  * matrix[9]  * matrix[15] +
             matrix[0]  * matrix[11] * matrix[13] +
             matrix[8]  * matrix[1]  * matrix[15] -
             matrix[8]  * matrix[3]  * matrix[13] -
             matrix[12] * matrix[1]  * matrix[11] +
             matrix[12] * matrix[3]  * matrix[9];

  inv[13] =  matrix[0]  * matrix[9]  * matrix[14] -
             matrix[0]  * matrix[10] * matrix[13] -
             matrix[8]  * matrix[1]  * matrix[14] +
             matrix[8]  * matrix[2]  * matrix[13] +
             matrix[12] * matrix[1]  * matrix[10] -
             matrix[12] * matrix[2]  * matrix[9];

  inv[2] =   matrix[1]  * matrix[6]  * matrix[15] -
             matrix[1]  * matrix[7]  * matrix[14] -
             matrix[5]  * matrix[2]  * matrix[15] +
             matrix[5]  * matrix[3]  * matrix[14] +
             matrix[13] * matrix[2]  * matrix[7] -
             matrix[13] * matrix[3]  * matrix[6];

  inv[6] =  -matrix[0]  * matrix[6]  * matrix[15] +
             matrix[0]  * matrix[7]  * matrix[14] +
             matrix[4]  * matrix[2]  * matrix[15] -
             matrix[4]  * matrix[3]  * matrix[14] -
             matrix[12] * matrix[2]  * matrix[7] +
             matrix[12] * matrix[3]  * matrix[6];

  inv[10] =  matrix[0]  * matrix[5]  * matrix[15] -
             matrix[0]  * matrix[7]  * matrix[13] -
             matrix[4]  * matrix[1]  * matrix[15] +
             matrix[4]  * matrix[3]  * matrix[13] +
             matrix[12] * matrix[1]  * matrix[7] -
             matrix[12] * matrix[3]  * matrix[5];

  inv[14] = -matrix[0]  * matrix[5]  * matrix[14] +
             matrix[0]  * matrix[6]  * matrix[13] +
             matrix[4]  * matrix[1]  * matrix[14] -
             matrix[4]  * matrix[2]  * matrix[13] -
             matrix[12] * matrix[1]  * matrix[6] +
             matrix[12] * matrix[2]  * matrix[5];

  inv[3] =  -matrix[1]  * matrix[6]  * matrix[11] +
             matrix[1]  * matrix[7]  * matrix[10] +
             matrix[5]  * matrix[2]  * matrix[11] -
             matrix[5]  * matrix[3]  * matrix[10] -
             matrix[9]  * matrix[2]  * matrix[7] +
             matrix[9]  * matrix[3]  * matrix[6];

  inv[7] =   matrix[0]  * matrix[6]  * matrix[11] -
             matrix[0]  * matrix[7]  * matrix[10] -
             matrix[4]  * matrix[2]  * matrix[11] +
             matrix[4]  * matrix[3]  * matrix[10] +
             matrix[8]  * matrix[2]  * matrix[7] -
             matrix[8]  * matrix[3]  * matrix[6];

  inv[11] = -matrix[0]  * matrix[5]  * matrix[11] +
             matrix[0]  * matrix[7]  * matrix[9] +
             matrix[4]  * matrix[1]  * matrix[11] -
             matrix[4]  * matrix[3]  * matrix[9] -
             matrix[8]  * matrix[1]  * matrix[7] +
             matrix[8]  * matrix[3]  * matrix[5];

  inv[15] =  matrix[0]  * matrix[5]  * matrix[10] -
             matrix[0]  * matrix[6]  * matrix[9] -
             matrix[4]  * matrix[1]  * matrix[10] +
             matrix[4]  * matrix[2]  * matrix[9] +
             matrix[8]  * matrix[1]  * matrix[6] -
             matrix[8]  * matrix[2]  * matrix[5];
					
  determinant = matrix[0] * inv[0] +
	              matrix[1] * inv[4] +
				        matrix[2] * inv[8] +
				        matrix[3] * inv[12];

  /* Might be difficult to check this in Reaper/JS, but it might also be redundant?
	if (determinant == 0)
    return false;
	*/

  determinant = 1.0 / determinant;

  matrix[0]  = inv[0]  * determinant;
	matrix[1]  = inv[1]  * determinant;
	matrix[2]  = inv[2]  * determinant;
	matrix[3]  = inv[3]  * determinant;
	
	matrix[4]  = inv[4]  * determinant;
	matrix[5]  = inv[5]  * determinant;
	matrix[6]  = inv[6]  * determinant;
	matrix[7]  = inv[7]  * determinant;
	
	matrix[8]  = inv[8]  * determinant;
	matrix[9]  = inv[9]  * determinant;
	matrix[10] = inv[10] * determinant;
	matrix[11] = inv[11] * determinant;
	
	matrix[12] = inv[12] * determinant;
	matrix[13] = inv[13] * determinant;
	matrix[14] = inv[14] * determinant;
	matrix[15] = inv[15] * determinant;
);






/*---------------------------------------------------------------------
  Graphics section
---------------------------------------------------------------------*/

/********************************************************************
Graphics: Set drawing color
********************************************************************/
function gxColorSet(alpha, red, green, blue)
(
	gfx_a = alpha;
	gfx_r = red;
	gfx_g = green;
	gfx_b  = blue;
);


/********************************************************************
Graphics: Set drawing position
********************************************************************/
function gxPositionSet(x, y)
(
	gfx_x = x;
	gfx_y = y;
);


/********************************************************************
Graphics: Determine geometry
********************************************************************/
function determineGeometry()
(
  centerX = gfx_w  * 0.5;
  centerY = gfx_h * 0.5;

  centerX < centerY ? radius = centerX : radius = centerY;
  radius = radius - 10;
  inverseRadius = 1. / radius;
);


/********************************************************************
Graphics: Draw background image based on ICST ambimonitor
********************************************************************/
function drawBackgroundImage()
(
  // Background graphics
  coordinatelist[0] = 0;                  //left-most pixel location for source
  coordinatelist[1] = 0;                  //top-most pixel location for source
  coordinatelist[2] = 800;                //width of source
  coordinatelist[3] = 800;                //height of source
  coordinatelist[4] = centerX - radius;   //left-most pixel location of destination
  coordinatelist[5] = centerY - radius;   //top-most pixel location of destination
  coordinatelist[6] = 2 * radius;         //width of destination to fill
  coordinatelist[7] = 2 * radius;         //height of destination to fill
  coordinatelist[8] =0;                   //represents offset from center of image
  coordinatelist[9] =0;                   //represents offset from center of image
  gfx_blitext(0,coordinatelist,0);
);
